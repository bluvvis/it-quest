from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)
import re
import random
import sqlite3
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è
FIND_IP, FIND_CITY, FIND_PASSWORD, FIND_HIDDEN_BUTTON, FINISH_QUEST = range(5)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
IP_ADDRESS = "95.52.96.86"
CITY_NAMES = ("–ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥", "–ö–µ–Ω–∏–≥—Å–±–µ—Ä–≥")
PASSWORD = "innohacker"
CHANNEL_ID = "@innoprog"
RANDOM_IMAGES = ["https://usefoyer.com/ap/api/captcha?text=innohacker&type=text"]
HIDDEN_BUTTON_URL = "https://bluvvis.github.io/it-quest/hidden_button.html"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  completed_at DATETIME,
                  subscribed BOOLEAN DEFAULT 0)''')
    conn.commit()
    conn.close()


init_db()


def save_user(user_id: int, username: str):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO users 
                 (user_id, username, completed_at)
                 VALUES (?, ?, ?)''',
              (user_id, username, datetime.now()))
    conn.commit()
    conn.close()


async def start(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    context.user_data.clear()

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 1", url="https://bluvvis.github.io/it-quest/find_ip.html")]
    ])

    await update.message.reply_text(
        "üéØ *–ó–∞–¥–∞–Ω–∏–µ 1*\n–ù–∞–π–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–∞–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    return FIND_IP


async def handle_ip(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()

    if user_input == IP_ADDRESS:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üó∫Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 2", url="https://www.google.com")]
        ])

        await update.message.reply_text(
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            "üéØ *–ó–∞–¥–∞–Ω–∏–µ 2*\n–ù–∞–π–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ —ç—Ç–æ–º—É IP-–∞–¥—Ä–µ—Å—É (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ XIX –≤–µ–∫–∞):",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return FIND_CITY

    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    return FIND_IP


async def handle_city(update: Update, context: CallbackContext):
    user_input = update.message.text.strip().lower()

    if user_input in [name.lower() for name in CITY_NAMES]:
        await update.message.reply_text(
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            "üéØ *–ó–∞–¥–∞–Ω–∏–µ 3*\n–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:",
            parse_mode="Markdown"
        )
        await update.message.reply_photo(random.choice(RANDOM_IMAGES))
        return FIND_PASSWORD

    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    return FIND_CITY


async def handle_password(update: Update, context: CallbackContext):
    user_input = update.message.text.strip().lower()

    if user_input == PASSWORD.lower():
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", url=HIDDEN_BUTTON_URL)]
        ])

        await update.message.reply_text(
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            "üéØ *–ó–∞–¥–∞–Ω–∏–µ 4*\n–ù–∞–π–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –µ–µ!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return FIND_HIDDEN_BUTTON

    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    return FIND_PASSWORD


async def handle_hidden_button(update: Update, context: CallbackContext):
    user = update.message.from_user
    save_user(user.id, user.username)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton("üö´ –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="skip_subscription")]
    ])

    await update.message.reply_text(
        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è!*\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    return FINISH_QUEST


async def finish_quest(update: Update, context: CallbackContext):
    if update.callback_query and update.callback_query.data == "skip_subscription":
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üòä")
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚ù§Ô∏è")

    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("üö´ –ö–≤–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")
    return ConversationHandler.END


def main():
    application = Application.builder().token("8186767146:AAGIwAU1wulZVPQ8gN9w8YtMqUHJ8wq68lg").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIND_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ip)],
            FIND_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)],
            FIND_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password)],
            FIND_HIDDEN_BUTTON: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hidden_button),
                CallbackQueryHandler(handle_hidden_button)
            ],
            FINISH_QUEST: [
                CallbackQueryHandler(finish_quest),
                MessageHandler(filters.TEXT & ~filters.COMMAND, finish_quest)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()