from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    JobQueue,
)
from telegram.constants import ChatMemberStatus
import re
import random
import openpyxl
from datetime import datetime, timedelta
import os

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_START, FIND_IP, FIND_CITY, FIND_PASSWORD, FIND_HIDDEN_BUTTON, FINISH_QUEST = range(6)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
IP_ADDRESS = "95.52.96.86"  # –ü—Ä–∏–º–µ—Ä IP-–∞–¥—Ä–µ—Å–∞
CITY_NAME = "–ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥"  # –ü—Ä–∏–º–µ—Ä –≥–æ—Ä–æ–¥–∞
PASSWORD = "innohacker"  # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–æ–ª—è

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 3
RANDOM_IMAGES = [
    "https://usefoyer.com/ap/api/captcha?text=innohacker&type=text",
]

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
EXCEL_FILE = "users_data.xlsx"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /info
ADMIN_IDS = {5790141925, 634030933}

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª Excel, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def initialize_excel():
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        workbook = openpyxl.load_workbook(EXCEL_FILE)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = "Users"
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        sheet.append(["ID", "Username", "Last Activity", "Current State", "Subscription Status"])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        workbook.save(EXCEL_FILE)
        print(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏: {os.path.abspath(EXCEL_FILE)}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel
async def save_user_data(user_id: int, username: str, current_state: str, subscription_status: str = None):
    workbook = openpyxl.load_workbook(EXCEL_FILE)
    sheet = workbook.active

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_found = False
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if row[0] == user_id:
            user_found = True
            break

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if user_found:
        for row in sheet.iter_rows(min_row=2):
            if row[0].value == user_id:
                row[1].value = username
                row[2].value = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                row[3].value = current_state
                if subscription_status:
                    row[4].value = subscription_status
                break
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        sheet.append([user_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), current_state, subscription_status or "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    workbook.save(EXCEL_FILE)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int, context: CallbackContext) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id="@innoprog", user_id=user_id)
        return chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–¥–∞–Ω–∏–π
    context.user_data["tasks"] = {
        "task1_completed": False,
        "task2_completed": False,
        "task3_completed": False,
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    await save_user_data(user_id, username, "–°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫—É "–Ø –≥–æ—Ç–æ–≤"
    reply_keyboard = [['–Ø –≥–æ—Ç–æ–≤!']]
    await update.message.reply_text(
        "**–í –æ–¥–Ω–æ–π –∫—Ä—É–ø–Ω–æ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª—É—á–∏–ª–∞—Å—å —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö.**\n\n"
        "–ö—Ç–æ-—Ç–æ —Å–ø—Ä—è—Ç–∞–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –∏ —Ç–æ–ª—å–∫–æ —É–º–Ω—ã–π —Ö–∞–∫–µ—Ä —Å–º–æ–∂–µ—Ç –µ–≥–æ –Ω–∞–π—Ç–∏ –∏ —Ä–∞–∑–≥–∞–¥–∞—Ç—å! "
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–µ—Ä–∏—é –∏—Å–ø—ã—Ç–∞–Ω–∏–π, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode="Markdown"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if context.job_queue:
        context.job_queue.run_once(send_reminder, when=3600, data=user_id)  # –ß–µ—Ä–µ–∑ 1 —á–∞—Å
        context.job_queue.run_once(send_reminder, when=86400, data=user_id)  # –ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
        context.job_queue.run_once(send_reminder, when=259200, data=user_id)  # –ß–µ—Ä–µ–∑ 3 –¥–Ω—è
    else:
        print("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç 'python-telegram-bot[job-queue]'.")

    return WAITING_FOR_START

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(context: CallbackContext):
    user_id = context.job.data
    await context.bot.send_message(
        chat_id=user_id,
        text="‚è∞ –¢—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–≤–µ—Å—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å! üöÄ"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –≥–æ—Ç–æ–≤!"
async def handle_start(update: Update, context: CallbackContext) -> int:
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id - 1)
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏–µ–º 1
    await update.message.reply_text(
        "**–ò—Å—Ç–æ—Ä–∏—è:**\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '–í –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö. "
        "–ö—Ç–æ-—Ç–æ —Å–ø—Ä—è—Ç–∞–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. "
        "–ù–∞–π–¥–∏ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.'\n\n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ IP-–∞–¥—Ä–µ—Å, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –Ω–∞ —Å–∞–π—Ç–µ.",
        parse_mode="Markdown"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–¥–∞–Ω–∏—é —Å IP
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 1", url="https://bluvvis.github.io/it-quest/find_ip.html")]
    ])
    task_message = await update.message.reply_text(
        "**–ó–∞–¥–∞–Ω–∏–µ 1:** –ì–¥–µ-—Ç–æ –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–æ —á–∏—Å–ª–æ. –≠—Ç–æ IP-–∞–¥—Ä–µ—Å. –ù–∞–π–¥–∏ –µ–≥–æ, –∏ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–π —à–∞–≥. üîç",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
    context.user_data["task_message_id"] = task_message.message_id
    return FIND_IP

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 1 (–ø–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–∞)
async def find_ip(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ IP-–∞–¥—Ä–µ—Å
    if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", user_input):
        if user_input == IP_ADDRESS:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
            await _delete_task_messages(update, context)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 1
            context.user_data["tasks"]["task1_completed"] = True

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.message.from_user.id
            username = update.message.from_user.username
            await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏–µ–º 2
            await update.message.reply_text(
                "**–ò—Å—Ç–æ—Ä–∏—è:**\n\n"
                "–¢—ã –Ω–∞—à—ë–ª IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. ",
                parse_mode="Markdown"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 2
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 2", url="https://www.google.com")]
            ])
            task_message = await update.message.reply_text(
                "**–ó–∞–¥–∞–Ω–∏–µ 2:** –í–≤–µ–¥–∏ —ç—Ç–æ—Ç IP-–∞–¥—Ä–µ—Å –≤ Google –∏ –Ω–∞–π–¥–∏ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω. –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ XIX –≤–µ–∫–µ ‚Äî –∫–ª—é—á –∫–æ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É! üåç",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
            context.user_data["task_message_id"] = task_message.message_id
            return FIND_CITY
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
            error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
            context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
            return FIND_IP
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_IP

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 2 (–ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞)
async def find_city(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º "—ë" –Ω–∞ "–µ"
    normalized_input = user_input.lower().replace("—ë", "–µ")
    normalized_city_name = CITY_NAME.lower().replace("—ë", "–µ")

    if normalized_input == normalized_city_name:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await _delete_task_messages(update, context)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 2
        context.user_data["tasks"]["task2_completed"] = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id
        username = update.message.from_user.username
        await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏–µ–º 3
        await update.message.reply_text(
            "**–ò—Å—Ç–æ—Ä–∏—è:**\n\n"
            "–¢—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ—Ä–≤–µ—Ä. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ. "
            ,
            parse_mode="Markdown"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 3
        task_message = await update.message.reply_text(
            "**–ó–∞–¥–∞–Ω–∏–µ 3:** –ú—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ captcha, –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç! üîê",
            parse_mode="Markdown"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        random_image = random.choice(RANDOM_IMAGES)
        photo_message = await update.message.reply_photo(random_image)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        context.user_data["task_message_id"] = task_message.message_id
        context.user_data["photo_message_id"] = photo_message.message_id
        return FIND_PASSWORD
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_CITY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 3 (–ø–æ–∏—Å–∫ –ø–∞—Ä–æ–ª—è)
async def find_password(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    if user_input.lower() == PASSWORD.lower():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await _delete_task_messages(update, context)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 3
        context.user_data["tasks"]["task3_completed"] = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id
        username = update.message.from_user.username
        await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–∏–µ–º 4
        await update.message.reply_text(
            "**–ò—Å—Ç–æ—Ä–∏—è:**\n\n"
            "–¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ! –ù–æ —Ñ–∞–π–ª –∑–∞—â–∏—â—ë–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
            ,
            parse_mode="Markdown"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 4
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 4", url="https://bluvvis.github.io/it-quest/hidden_button.html")]
        ])
        await update.message.reply_text(
            "**–ó–∞–¥–∞–Ω–∏–µ 4:** –ù–∞ —Å–∞–π—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ¬´–Ω–µ–≤–∏–¥–∏–º—É—é¬ª –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ—ë. üïµÔ∏è‚Äç‚ôÇÔ∏è",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return FIND_HIDDEN_BUTTON
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_PASSWORD

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 4 (–ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç–æ–π –∫–Ω–æ–ø–∫–∏)
async def find_hidden_button(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è 1-3 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    tasks = context.user_data.get("tasks", {})
    if not all(tasks.values()):
        await update.message.reply_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –í–µ—Ä–Ω–∏—Å—å –∏ –≤—ã–ø–æ–ª–Ω–∏ –∏—Ö, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç. ‚ö†Ô∏è",
            parse_mode="Markdown"
        )
        return FIND_HIDDEN_BUTTON

    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
    await finish_quest(update, context)
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
async def finish_quest(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    is_subscribed = await check_subscription(user_id, context)
    subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_subscribed else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_user_data(user_id, username, "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", subscription_status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/innoprog")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    await update.message.reply_text(
        "**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç! üéâ**\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription_button(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    username = update.callback_query.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(user_id, context)

    if is_subscribed:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Excel
        await save_user_data(user_id, username, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–ü–æ–¥–ø–∏—Å–∞–Ω")
        await update.callback_query.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üéâ")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Excel
        await save_user_data(user_id, username, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
        await update.callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. ‚ùå")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start.")
    return ConversationHandler.END

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–∏–µ–º
async def _delete_task_messages(update: Update, context: CallbackContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    if "task_message_id" in context.user_data:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=context.user_data["task_message_id"])
        del context.user_data["task_message_id"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "photo_message_id" in context.user_data:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=context.user_data["photo_message_id"])
        del context.user_data["photo_message_id"]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
    if "error_message_ids" in context.user_data:
        for message_id in context.user_data["error_message_ids"]:
            try:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        del context.user_data["error_message_ids"]

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

# –ö–æ–º–∞–Ω–¥–∞ /info –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def info(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. ‚ùå")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª Excel
    await update.message.reply_document(document=open(EXCEL_FILE, "rb"))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª Excel
    initialize_excel()

    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = Application.builder().token("8186767146:AAGIwAU1wulZVPQ8gN9w8YtMqUHJ8wq68lg").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start)],
            FIND_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_ip)],
            FIND_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_city)],
            FIND_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_password)],
            FIND_HIDDEN_BUTTON: [
                CommandHandler("finish", finish_quest),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /finish
                MessageHandler(filters.TEXT & ~filters.COMMAND, find_hidden_button),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    application.add_handler(CallbackQueryHandler(check_subscription_button, pattern="^check_subscription$"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    application.add_handler(CommandHandler("info", info))

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
