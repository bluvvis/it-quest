from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
import re
import random

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_START, FIND_IP, FIND_CITY, FIND_PASSWORD, FIND_HIDDEN_BUTTON, FINISH_QUEST = range(6)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
IP_ADDRESS = "95.52.96.86"  # –ü—Ä–∏–º–µ—Ä IP-–∞–¥—Ä–µ—Å–∞
CITY_NAME = "–ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥"  # –ü—Ä–∏–º–µ—Ä –≥–æ—Ä–æ–¥–∞
PASSWORD = "innohacker"  # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–æ–ª—è

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 3
RANDOM_IMAGES = [
    "https://usefoyer.com/ap/api/captcha?text=innohacker&type=text",
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–¥–∞–Ω–∏–π
    context.user_data["tasks"] = {
        "task1_completed": False,
        "task2_completed": False,
        "task3_completed": False,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    reply_keyboard = [['–ù–£, –í –ü–£–¢–¨!']]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã INNOPROG. –£–¥–∞—á–∏ –≤ IT-–∫–≤–µ—Å—Ç–µ!\n\n"
        "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return WAITING_FOR_START

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–£, –í –ü–£–¢–¨!"
async def handle_start(update: Update, context: CallbackContext) -> int:
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id - 1)
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–¥–∞–Ω–∏—é —Å IP
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 1", url="https://bluvvis.github.io/it-quest/find_ip.html")]
    ])
    task_message = await update.message.reply_text(
        "–ó–∞–¥–∞–Ω–∏–µ 1: –ì–¥–µ-—Ç–æ –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–æ —á–∏—Å–ª–æ. –≠—Ç–æ IP-–∞–¥—Ä–µ—Å. –ù–∞–π–¥–∏ –µ–≥–æ, –∏ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–π —à–∞–≥.",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
    context.user_data["task_message_id"] = task_message.message_id
    return FIND_IP

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 1 (–ø–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–∞)
async def find_ip(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ IP-–∞–¥—Ä–µ—Å
    if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", user_input):
        if user_input == IP_ADDRESS:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
            await _delete_task_messages(update, context)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 1
            context.user_data["tasks"]["task1_completed"] = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 2
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 2", url="https://www.google.com")]
            ])
            task_message = await update.message.reply_text(
                "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ\n\n"
                "–ó–∞–¥–∞–Ω–∏–µ 2: –í–≤–µ–¥–∏ —ç—Ç–æ—Ç IP-–∞–¥—Ä–µ—Å –≤ Google –∏ –Ω–∞–π–¥–∏ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω. –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ XIX –≤–µ–∫–µ ‚Äî –∫–ª—é—á –∫–æ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!",
                reply_markup=keyboard
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
            context.user_data["task_message_id"] = task_message.message_id
            return FIND_CITY
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
            error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
            context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
            return FIND_IP
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_IP

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 2 (–ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞)
async def find_city(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    if user_input.lower() == CITY_NAME.lower():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await _delete_task_messages(update, context)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 2
        context.user_data["tasks"]["task2_completed"] = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 3
        task_message = await update.message.reply_text(
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ\n\n"
            "–ó–∞–¥–∞–Ω–∏–µ 3: –ú—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ captcha, –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        random_image = random.choice(RANDOM_IMAGES)
        photo_message = await update.message.reply_photo(random_image)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        context.user_data["task_message_id"] = task_message.message_id
        context.user_data["photo_message_id"] = photo_message.message_id
        return FIND_PASSWORD
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_CITY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 3 (–ø–æ–∏—Å–∫ –ø–∞—Ä–æ–ª—è)
async def find_password(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    if user_input.lower() == PASSWORD.lower():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await _delete_task_messages(update, context)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 3
        context.user_data["tasks"]["task3_completed"] = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è 4
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 4", url="https://bluvvis.github.io/it-quest/hidden_button.html")]
        ])
        await update.message.reply_text(
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ\n\n"
            "–ó–∞–¥–∞–Ω–∏–µ 4: –ù–∞ —Å–∞–π—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ¬´–Ω–µ–≤–∏–¥–∏–º—É—é¬ª –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ—ë.",
            reply_markup=keyboard
        )
        return FIND_HIDDEN_BUTTON
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_PASSWORD

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è 4 (–ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç–æ–π –∫–Ω–æ–ø–∫–∏)
async def find_hidden_button(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è 1-3 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    tasks = context.user_data.get("tasks", {})
    if not all(tasks.values()):
        await update.message.reply_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –í–µ—Ä–Ω–∏—Å—å –∏ –≤—ã–ø–æ–ª–Ω–∏ –∏—Ö, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç."
        )
        return FIND_HIDDEN_BUTTON

    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∂–¥—ë–º –∫–æ–º–∞–Ω–¥—É /finish
    if update.message.text.strip().lower() == "/finish":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await _delete_task_messages(update, context)

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
        user_id = update.message.from_user.id
        username = update.message.from_user.username

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # save_to_db(user_id, username)

        await update.message.reply_text(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç! üéâ\n"
            "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
        )
        return ConversationHandler.END
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        error_message = await update.message.reply_text("–ù–µ—Ç, –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        context.user_data.setdefault("error_message_ids", []).append(error_message.message_id)
        return FIND_HIDDEN_BUTTON

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start.")
    return ConversationHandler.END

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–∏–µ–º
async def _delete_task_messages(update: Update, context: CallbackContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    if "task_message_id" in context.user_data:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=context.user_data["task_message_id"])
        del context.user_data["task_message_id"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "photo_message_id" in context.user_data:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=context.user_data["photo_message_id"])
        del context.user_data["photo_message_id"]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
    if "error_message_ids" in context.user_data:
        for message_id in context.user_data["error_message_ids"]:
            try:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        del context.user_data["error_message_ids"]

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

def main() -> None:
    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = Application.builder().token("8186767146:AAGIwAU1wulZVPQ8gN9w8YtMqUHJ8wq68lg").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start)],
            FIND_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_ip)],
            FIND_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_city)],
            FIND_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_password)],
            FIND_HIDDEN_BUTTON: [
                CommandHandler("finish", find_hidden_button),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /finish
                MessageHandler(filters.TEXT & ~filters.COMMAND, find_hidden_button),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()