import random

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters.state import StateFilter

from bot.handlers.quest import RANDOM_IMAGES
from bot.services.subscription_check import check_subscription
from bot.states import QuestStates
from bot.services.database import save_user_data, get_user
from bot.utils.reminders import schedule_reminders

router = Router()

# –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤ FSM
STATE_MAP = {
    None: QuestStates.waiting_for_start,  # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    "–°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞": QuestStates.waiting_for_start,
    "–ó–∞–¥–∞–Ω–∏–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ": QuestStates.find_city,
    "–ó–∞–¥–∞–Ω–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ": QuestStates.find_password,
    "–ó–∞–¥–∞–Ω–∏–µ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ": QuestStates.find_hidden_button,
    "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω": None,  # –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
}

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    user = await get_user(user_id)
    if user:
        await save_user_data(user_id, username, user.current_state)
        resume_state = STATE_MAP.get(user.current_state, QuestStates.waiting_for_start)

        if resume_state:
            await state.set_state(resume_state)
            if resume_state != QuestStates.waiting_for_start:
                await message.answer(
                    "<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–≤–µ—Å—Ç."
                )

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω—É–∂–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é
            if resume_state == QuestStates.waiting_for_start:
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤!")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                await message.answer(
                    "<b>–í –æ–¥–Ω–æ–π –∫—Ä—É–ø–Ω–æ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
                    "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –ø–æ–º–æ—á—å –Ω–∞–º?",
                    reply_markup=keyboard
                )

            elif resume_state == QuestStates.find_city:
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 2",
                        web_app=WebAppInfo(url="https://2ip.io/ru/geoip/")
                    )]
                ])
                await message.answer(
                    "<b>–ó–∞–¥–∞–Ω–∏–µ 2:</b> –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å 95.52.96.86 –∏ –Ω–∞–π–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω. "
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ XIX –≤–µ–∫–µ ‚Äî –∫–ª—é—á –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!",
                    reply_markup=keyboard
                )

            elif resume_state == QuestStates.find_password:
                await message.answer_photo(
                    photo=random.choice(RANDOM_IMAGES),
                    caption="<b>–ó–∞–¥–∞–Ω–∏–µ 3:</b> –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ (captcha).",
                )

            elif resume_state == QuestStates.find_hidden_button:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 4",
                                          url="https://bluvvis.github.io/it-quest/hidden_button.html")]
                ])
                await message.answer(
                    "<b>–ó–∞–¥–∞–Ω–∏–µ 4:</b> –ù–∞–π–¥–∏—Ç–µ ¬´–Ω–µ–≤–∏–¥–∏–º—É—é¬ª –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ.",
                    reply_markup=keyboard
                )


        else:
            # await state.clear()
            is_sub = await check_subscription(user_id, message.bot)
            subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"

            await save_user_data(user_id, username, "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", subscription_status)

            if subscription_status == "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω":
                await message.answer(
                    "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç! üéâ\n\n"
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/innoprog")],
                        [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
                    ]),
                )
            else:
                await message.answer(
                    "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç –∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞! üéâ\n\n"
                    "–°–∫–æ—Ä–æ, –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ, –º—ã –æ–±—ä—è–≤–∏–º –∏—Ç–æ–≥–∏ –Ω–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –≤ Telegram-–∫–∞–Ω–∞–ª–µ! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ ‚Äî –∂–¥–µ–º –≤–∞—Å –≤ —ç—Ñ–∏—Ä–µ, —É–¥–∞—á–∏ –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏! üòâ\n\n",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/innoprog")]
                    ]),
                )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await state.clear()
        await state.update_data(tasks={
            "task1_completed": False,
            "task2_completed": False,
            "task3_completed": False,
        })
        await save_user_data(user_id, username, "–°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞")

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–Ø –≥–æ—Ç–æ–≤!")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "<b>–í –æ–¥–Ω–æ–π –∫—Ä—É–ø–Ω–æ–π IT-–∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
            "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –ø–æ–º–æ—á—å –Ω–∞–º?",
            reply_markup=keyboard
        )
        schedule_reminders(user_id, [3600, 86400, 259200], message.bot)
        await state.set_state(QuestStates.waiting_for_start)


@router.message(F.text == "–Ø –≥–æ—Ç–æ–≤!", StateFilter(QuestStates.waiting_for_start))
async def handle_ready(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        "<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ¬´–í –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö... "
        "–ù–∞–π–¥–∏ IP-–∞–¥—Ä–µ—Å.¬ª"
    )
    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–¥–∞–Ω–∏—é 1 —á–µ—Ä–µ–∑ WebApp
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 1", web_app=WebAppInfo(url="https://bluvvis.github.io/it-quest/find_ip.html"))]
    ])
    await message.answer(
        "<b>–ó–∞–¥–∞–Ω–∏–µ 1:</b> –ù–∞–π–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –Ω–∞ —Å–∞–π—Ç–µ.",
        reply_markup=keyboard
    )
    await state.set_state(QuestStates.find_ip)


@router.message(Command("reset"))
async def cmd_clean(message: types.Message, state: FSMContext) -> None:
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ, —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞"
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    await save_user_data(user_id, username, "–°—Ç–∞—Ä—Ç –∫–≤–µ—Å—Ç–∞")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")

@router.message(Command("check"))
async def cmd_check_subscription(message: types.Message) -> None:
    parts = message.text.split()
    if len(parts) > 1:
        try:
            user_id = int(parts[1])
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return
    else:
        user_id = message.from_user.id

    is_sub = await check_subscription(user_id, message.bot)
    status_text = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    await message.answer(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status_text}")