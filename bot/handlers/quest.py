import re
import random
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.types import WebAppInfo

from bot.states import QuestStates
from bot.config import IP_ADDRESS, CITY_NAME, PASSWORD
from bot.services.database import save_user_data

router = Router()

RANDOM_IMAGES = [
    "https://usefoyer.com/ap/api/captcha?text=innohacker&type=text",
]

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
from bot.services.subscription_check import check_subscription


@router.message(StateFilter(QuestStates.find_ip))
async def find_ip_handler(message: types.Message, state: FSMContext) -> None:
    user_input = message.text.strip()
    if re.match(r"^\d{1,3}(?:\.\d{1,3}){3}$", user_input):
        if user_input == IP_ADDRESS:
            data = await state.get_data()
            tasks = data.get("tasks", {})
            tasks["task1_completed"] = True
            await state.update_data(tasks=tasks)

            user_id = message.chat.id
            username = message.chat.username or message.chat.full_name
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            is_sub = await check_subscription(user_id, message.bot)
            subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
            await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", subscription_status)

            await message.answer(
                "<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ—Ä–≤–µ—Ä.",
            )
            # Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ –≤—Ç–æ—Ä–æ–º—É –∑–∞–¥–∞–Ω–∏—é —á–µ—Ä–µ–∑ WebApp
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 2",
                    web_app=WebAppInfo(url="https://www.google.com/search?q=%D0%BD%D0%B0%D0%B9%D1%82%D0%B8+%D0%B3%D0%BE%D1%80%D0%BE%D0%B4+%D0%BF%D0%BE+ip&sca_esv=65173d9604faf661&source=hp&ei=szngZ-fNObWK9u8P3uDBqQc&iflsig=ACkRmUkAAAAAZ-BHw4T7OhhaNM46qszBy5VRg0n-iz8J&ved=0ahUKEwin8-fD0qCMAxU1hf0HHV5wMHUQ4dUDCA4&uact=5&oq=%D0%BD%D0%B0%D0%B9%D1%82%D0%B8+%D0%B3%D0%BE%D1%80%D0%BE%D0%B4+%D0%BF%D0%BE+ip&gs_lp=Egdnd3Mtd2l6Ih3QvdCw0LnRgtC4INCz0L7RgNC-0LQg0L_QviBpcDIFEAAYgAQyBhAAGBYYHjIFEAAY7wUyCBAAGKIEGIkFMggQABiABBiiBEiwLlDBBViVKnAEeACQAQGYAfsBoAGYG6oBBTYuOS43uAEDyAEA-AEBmAIZoALtGagCCsICGhAAGIAEGLQCGNQDGOUCGLcDGIoFGOoCGIoDwgIKEC4YgAQYQxiKBcICChAAGIAEGEMYigXCAgkQABiABBgBGArCAg8QLhiABBgBGNEDGMcBGArCAgUQLhiABMICCBAuGIAEGNQCwgILEC4YgAQY0QMYxwGYA9MB4gMFEgExIEDxBTc69_lxyJYCkgcGOS4xMC42oAeunwGyBwY1LjEwLja4B-IZ&sclient=gws-wiz")
                )]
            ])
            await message.answer(
                "<b>–ó–∞–¥–∞–Ω–∏–µ 2:</b> –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤ Google –∏ –Ω–∞–π–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω. "
                "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ XIX –≤–µ–∫–µ ‚Äî –∫–ª—é—á –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!",
                reply_markup=keyboard,
            )
            await state.set_state(QuestStates.find_city)
        else:
            await message.answer("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! ‚ùå")
    else:
        await message.answer("<b>–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ IP-–∞–¥—Ä–µ—Å.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! ‚ùå")


@router.message(StateFilter(QuestStates.find_city))
async def find_city_handler(message: types.Message, state: FSMContext) -> None:
    user_input = message.text.strip().lower().replace("—ë", "–µ")
    expected_city = CITY_NAME.lower().replace("—ë", "–µ")
    if user_input == expected_city:
        data = await state.get_data()
        tasks = data.get("tasks", {})
        tasks["task2_completed"] = True
        await state.update_data(tasks=tasks)

        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        is_sub = await check_subscription(user_id, message.bot)
        subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", subscription_status)

        await message.answer("<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        # Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–¥–∞–Ω–∏—é 3 —á–µ—Ä–µ–∑ WebApp

        await message.answer_photo(
            photo= random.choice(RANDOM_IMAGES),
            caption = "<b>–ó–∞–¥–∞–Ω–∏–µ 3:</b> –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ (captcha)"
        )
        await state.set_state(QuestStates.find_password)
    else:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! ‚ùå")


@router.message(StateFilter(QuestStates.find_password))
async def find_password_handler(message: types.Message, state: FSMContext) -> None:
    user_input = message.text.strip().lower()
    if user_input == PASSWORD.lower():
        data = await state.get_data()
        tasks = data.get("tasks", {})
        tasks["task3_completed"] = True
        await state.update_data(tasks=tasks)

        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        is_sub = await check_subscription(user_id, message.bot)
        subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        await save_user_data(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", subscription_status)

        await message.answer(
            "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –Ω—É–∂–µ–Ω –µ—â—ë –æ–¥–∏–Ω —à–∞–≥...",
        )
        # Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–¥–∞–Ω–∏—é 4 —á–µ—Ä–µ–∑ WebApp
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 4",
                web_app=WebAppInfo(url="https://bluvvis.github.io/it-quest/hidden_button.html")
            )]
        ])
        await message.answer(
            "<b>–ó–∞–¥–∞–Ω–∏–µ 4:</b> –ù–∞–π–¥–∏—Ç–µ ¬´–Ω–µ–≤–∏–¥–∏–º—É—é¬ª –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–∞–π—Ç–µ.",
            reply_markup=keyboard,
        )
        await state.set_state(QuestStates.find_hidden_button)
    else:
        await message.answer("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! ‚ùå")


@router.message(StateFilter(QuestStates.find_hidden_button))
async def find_hidden_button_handler(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    tasks = data.get("tasks", {})
    if not all(tasks.values()):
        await message.answer("<b>–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.</b> –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
    await finish_quest(message, state)


async def finish_quest(message: types.Message, state: FSMContext) -> None:
    from bot.services.database import save_user_data
    from bot.services.subscription_check import check_subscription

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    is_sub = await check_subscription(user_id, message.bot)
    subscription_status = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_sub else "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"

    await save_user_data(user_id, username, "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", subscription_status)

    if subscription_status == "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω":
        await message.answer(
            "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç! üéâ\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/innoprog")],
                [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ]),
        )
    else:
        await message.answer(
            "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç –∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞! üéâ\n\n"
            "–°–∫–æ—Ä–æ, –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ, –º—ã –æ–±—ä—è–≤–∏–º –∏—Ç–æ–≥–∏ –Ω–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –≤ Telegram-–∫–∞–Ω–∞–ª–µ! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ ‚Äî –∂–¥–µ–º –≤–∞—Å –≤ —ç—Ñ–∏—Ä–µ, —É–¥–∞—á–∏ –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏! üòâ\n\n",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/innoprog")]
            ]),
        )
    await state.clear()
